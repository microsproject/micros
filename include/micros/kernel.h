/*--------------------------------------------------------------------------------------------------------------------*/
/* SPDX-License-Identifier: MIT */
/*--------------------------------------------------------------------------------------------------------------------*/
#ifndef MICROS_KERNEL_H
#define MICROS_KERNEL_H
/*--------------------------------------------------------------------------------------------------------------------*/
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
/*--------------------------------------------------------------------------------------------------------------------*/
#ifdef __cplusplus
extern "C" {
#endif
/*--------------------------------------------------------------------------------------------------------------------*/
typedef void (*k_irq_handler_t)(void);
typedef int (*k_syscall_handler_t)(uint32_t, uint32_t, void*, void*);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_irq_enable(uint32_t irq_number);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_irq_disable(uint32_t irq_number);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_irq_set_priority(uint32_t irq_number, uint32_t priority);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_irq_register_handler(uint32_t irq_number, k_irq_handler_t handler);
/*--------------------------------------------------------------------------------------------------------------------*/
uint32_t k_enter_critical(void);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_leave_critical(uint32_t state);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_scheduler_lock(void);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_scheduler_unlock(void);
/*--------------------------------------------------------------------------------------------------------------------*/
bool k_scheduler_is_locked(void);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_scheduler_start(void);
/*--------------------------------------------------------------------------------------------------------------------*/
int k_task_create(void (*task_func)(void*),
                  void* arg,
                  uint32_t* stack_top,
                  size_t stack_size);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_task_yield(void);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_delay_ms(uint32_t ms);
/*--------------------------------------------------------------------------------------------------------------------*/
void k_syscall_register(uint32_t syscall_number, k_syscall_handler_t handler);
/*--------------------------------------------------------------------------------------------------------------------*/
int k_syscall_invoke(uint32_t arg0, uint32_t arg1, void* arg2, void* arg3);
/*--------------------------------------------------------------------------------------------------------------------*/
#ifdef __cplusplus
}
#endif
/*--------------------------------------------------------------------------------------------------------------------*/
#endif
/*--------------------------------------------------------------------------------------------------------------------*/
